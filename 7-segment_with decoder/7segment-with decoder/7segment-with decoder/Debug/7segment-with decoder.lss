
7segment-with decoder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000073e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000073e  000007b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000007b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c0  00000000  00000000  00000f08  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007c5  00000000  00000000  00000fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002ba  00000000  00000000  0000178d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004e8  00000000  00000000  00001a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000164  00000000  00000000  00001f30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000260  00000000  00000000  00002094  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000614  00000000  00000000  000022f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e3       	ldi	r30, 0x3E	; 62
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 9d 03 	jmp	0x73a	; 0x73a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#define F_CPU 8000000UL	
#include <util/delay.h>
#include "seven_decoder.h"
int main(void)
{
	seven_seg_init('D');
  92:	84 e4       	ldi	r24, 0x44	; 68
  94:	0e 94 83 03 	call	0x706	; 0x706 <seven_seg_init>
	unsigned char counter=0;
    while(1)
    {
		for(counter=0;counter<=9;counter++)
  98:	c0 e0       	ldi	r28, 0x00	; 0
  9a:	d0 e0       	ldi	r29, 0x00	; 0
		{
			seven_seg_write('D',counter);
  9c:	84 e4       	ldi	r24, 0x44	; 68
  9e:	6c 2f       	mov	r22, r28
  a0:	0e 94 9a 03 	call	0x734	; 0x734 <seven_seg_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	99 e6       	ldi	r25, 0x69	; 105
  a8:	a8 e1       	ldi	r26, 0x18	; 24
  aa:	81 50       	subi	r24, 0x01	; 1
  ac:	90 40       	sbci	r25, 0x00	; 0
  ae:	a0 40       	sbci	r26, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x18>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x22>
  b4:	00 00       	nop
{
	seven_seg_init('D');
	unsigned char counter=0;
    while(1)
    {
		for(counter=0;counter<=9;counter++)
  b6:	cf 5f       	subi	r28, 0xFF	; 255
  b8:	ca 30       	cpi	r28, 0x0A	; 10
  ba:	80 f3       	brcs	.-32     	; 0x9c <main+0xa>
  bc:	cd 2f       	mov	r28, r29
  be:	ee cf       	rjmp	.-36     	; 0x9c <main+0xa>

000000c0 <set_pin_dir>:
 */ 
#include<avr/io.h>
#include "std_macros.h"
void set_pin_dir(char port ,char pin,char dir)
{
	switch(port)
  c0:	84 34       	cpi	r24, 0x44	; 68
  c2:	09 f4       	brne	.+2      	; 0xc6 <set_pin_dir+0x6>
  c4:	71 c0       	rjmp	.+226    	; 0x1a8 <set_pin_dir+0xe8>
  c6:	85 34       	cpi	r24, 0x45	; 69
  c8:	48 f4       	brcc	.+18     	; 0xdc <set_pin_dir+0x1c>
  ca:	82 34       	cpi	r24, 0x42	; 66
  cc:	99 f1       	breq	.+102    	; 0x134 <set_pin_dir+0x74>
  ce:	83 34       	cpi	r24, 0x43	; 67
  d0:	08 f0       	brcs	.+2      	; 0xd4 <set_pin_dir+0x14>
  d2:	4d c0       	rjmp	.+154    	; 0x16e <set_pin_dir+0xae>
  d4:	81 34       	cpi	r24, 0x41	; 65
  d6:	09 f0       	breq	.+2      	; 0xda <set_pin_dir+0x1a>
  d8:	83 c0       	rjmp	.+262    	; 0x1e0 <set_pin_dir+0x120>
  da:	0f c0       	rjmp	.+30     	; 0xfa <set_pin_dir+0x3a>
  dc:	82 36       	cpi	r24, 0x62	; 98
  de:	51 f1       	breq	.+84     	; 0x134 <set_pin_dir+0x74>
  e0:	83 36       	cpi	r24, 0x63	; 99
  e2:	20 f4       	brcc	.+8      	; 0xec <set_pin_dir+0x2c>
  e4:	81 36       	cpi	r24, 0x61	; 97
  e6:	09 f0       	breq	.+2      	; 0xea <set_pin_dir+0x2a>
  e8:	7b c0       	rjmp	.+246    	; 0x1e0 <set_pin_dir+0x120>
  ea:	07 c0       	rjmp	.+14     	; 0xfa <set_pin_dir+0x3a>
  ec:	83 36       	cpi	r24, 0x63	; 99
  ee:	09 f4       	brne	.+2      	; 0xf2 <set_pin_dir+0x32>
  f0:	3e c0       	rjmp	.+124    	; 0x16e <set_pin_dir+0xae>
  f2:	84 36       	cpi	r24, 0x64	; 100
  f4:	09 f0       	breq	.+2      	; 0xf8 <set_pin_dir+0x38>
  f6:	74 c0       	rjmp	.+232    	; 0x1e0 <set_pin_dir+0x120>
  f8:	57 c0       	rjmp	.+174    	; 0x1a8 <set_pin_dir+0xe8>
	{	
		case 'a':
		case 'A':
		if(dir==1)
  fa:	41 30       	cpi	r20, 0x01	; 1
  fc:	69 f4       	brne	.+26     	; 0x118 <set_pin_dir+0x58>
		{
			SET_BIT(DDRA,pin);
  fe:	2a b3       	in	r18, 0x1a	; 26
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	ac 01       	movw	r20, r24
 106:	02 c0       	rjmp	.+4      	; 0x10c <set_pin_dir+0x4c>
 108:	44 0f       	add	r20, r20
 10a:	55 1f       	adc	r21, r21
 10c:	6a 95       	dec	r22
 10e:	e2 f7       	brpl	.-8      	; 0x108 <set_pin_dir+0x48>
 110:	ba 01       	movw	r22, r20
 112:	62 2b       	or	r22, r18
 114:	6a bb       	out	0x1a, r22	; 26
 116:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pin);
 118:	2a b3       	in	r18, 0x1a	; 26
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	ac 01       	movw	r20, r24
 120:	02 c0       	rjmp	.+4      	; 0x126 <set_pin_dir+0x66>
 122:	44 0f       	add	r20, r20
 124:	55 1f       	adc	r21, r21
 126:	6a 95       	dec	r22
 128:	e2 f7       	brpl	.-8      	; 0x122 <set_pin_dir+0x62>
 12a:	ba 01       	movw	r22, r20
 12c:	60 95       	com	r22
 12e:	62 23       	and	r22, r18
 130:	6a bb       	out	0x1a, r22	; 26
 132:	08 95       	ret
		}
       break;

		case 'b':
		case 'B':
		if(dir==1)
 134:	41 30       	cpi	r20, 0x01	; 1
 136:	69 f4       	brne	.+26     	; 0x152 <set_pin_dir+0x92>
		{
			SET_BIT(DDRB,pin);
 138:	27 b3       	in	r18, 0x17	; 23
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	ac 01       	movw	r20, r24
 140:	02 c0       	rjmp	.+4      	; 0x146 <set_pin_dir+0x86>
 142:	44 0f       	add	r20, r20
 144:	55 1f       	adc	r21, r21
 146:	6a 95       	dec	r22
 148:	e2 f7       	brpl	.-8      	; 0x142 <set_pin_dir+0x82>
 14a:	ba 01       	movw	r22, r20
 14c:	62 2b       	or	r22, r18
 14e:	67 bb       	out	0x17, r22	; 23
 150:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pin);
 152:	27 b3       	in	r18, 0x17	; 23
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	ac 01       	movw	r20, r24
 15a:	02 c0       	rjmp	.+4      	; 0x160 <set_pin_dir+0xa0>
 15c:	44 0f       	add	r20, r20
 15e:	55 1f       	adc	r21, r21
 160:	6a 95       	dec	r22
 162:	e2 f7       	brpl	.-8      	; 0x15c <set_pin_dir+0x9c>
 164:	ba 01       	movw	r22, r20
 166:	60 95       	com	r22
 168:	62 23       	and	r22, r18
 16a:	67 bb       	out	0x17, r22	; 23
 16c:	08 95       	ret
		}
		break;

	   case 'C':
	   case 'c':
	   if(dir==1)
 16e:	41 30       	cpi	r20, 0x01	; 1
 170:	69 f4       	brne	.+26     	; 0x18c <set_pin_dir+0xcc>
	   {
		   SET_BIT(DDRC,pin);
 172:	24 b3       	in	r18, 0x14	; 20
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	ac 01       	movw	r20, r24
 17a:	02 c0       	rjmp	.+4      	; 0x180 <set_pin_dir+0xc0>
 17c:	44 0f       	add	r20, r20
 17e:	55 1f       	adc	r21, r21
 180:	6a 95       	dec	r22
 182:	e2 f7       	brpl	.-8      	; 0x17c <set_pin_dir+0xbc>
 184:	ba 01       	movw	r22, r20
 186:	62 2b       	or	r22, r18
 188:	64 bb       	out	0x14, r22	; 20
 18a:	08 95       	ret
	   }
	   else
	   {
		   CLR_BIT(DDRC,pin);
 18c:	24 b3       	in	r18, 0x14	; 20
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	ac 01       	movw	r20, r24
 194:	02 c0       	rjmp	.+4      	; 0x19a <set_pin_dir+0xda>
 196:	44 0f       	add	r20, r20
 198:	55 1f       	adc	r21, r21
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <set_pin_dir+0xd6>
 19e:	ba 01       	movw	r22, r20
 1a0:	60 95       	com	r22
 1a2:	62 23       	and	r22, r18
 1a4:	64 bb       	out	0x14, r22	; 20
 1a6:	08 95       	ret
	   }
	   break;

      case 'd':
      case 'D':
      if(dir==1)
 1a8:	41 30       	cpi	r20, 0x01	; 1
 1aa:	69 f4       	brne	.+26     	; 0x1c6 <set_pin_dir+0x106>
      {
	      SET_BIT(DDRD,pin);
 1ac:	21 b3       	in	r18, 0x11	; 17
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	ac 01       	movw	r20, r24
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <set_pin_dir+0xfa>
 1b6:	44 0f       	add	r20, r20
 1b8:	55 1f       	adc	r21, r21
 1ba:	6a 95       	dec	r22
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <set_pin_dir+0xf6>
 1be:	ba 01       	movw	r22, r20
 1c0:	62 2b       	or	r22, r18
 1c2:	61 bb       	out	0x11, r22	; 17
 1c4:	08 95       	ret
      }
      else
      {
	      CLR_BIT(DDRD,pin);
 1c6:	21 b3       	in	r18, 0x11	; 17
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	ac 01       	movw	r20, r24
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <set_pin_dir+0x114>
 1d0:	44 0f       	add	r20, r20
 1d2:	55 1f       	adc	r21, r21
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <set_pin_dir+0x110>
 1d8:	ba 01       	movw	r22, r20
 1da:	60 95       	com	r22
 1dc:	62 23       	and	r22, r18
 1de:	61 bb       	out	0x11, r22	; 17
 1e0:	08 95       	ret

000001e2 <DIO_write_pin>:
	}
}

void DIO_write_pin(char port,char pin ,char val)
{
	switch(port)
 1e2:	84 34       	cpi	r24, 0x44	; 68
 1e4:	09 f4       	brne	.+2      	; 0x1e8 <DIO_write_pin+0x6>
 1e6:	71 c0       	rjmp	.+226    	; 0x2ca <DIO_write_pin+0xe8>
 1e8:	85 34       	cpi	r24, 0x45	; 69
 1ea:	48 f4       	brcc	.+18     	; 0x1fe <DIO_write_pin+0x1c>
 1ec:	82 34       	cpi	r24, 0x42	; 66
 1ee:	99 f1       	breq	.+102    	; 0x256 <DIO_write_pin+0x74>
 1f0:	83 34       	cpi	r24, 0x43	; 67
 1f2:	08 f0       	brcs	.+2      	; 0x1f6 <DIO_write_pin+0x14>
 1f4:	4d c0       	rjmp	.+154    	; 0x290 <DIO_write_pin+0xae>
 1f6:	81 34       	cpi	r24, 0x41	; 65
 1f8:	09 f0       	breq	.+2      	; 0x1fc <DIO_write_pin+0x1a>
 1fa:	83 c0       	rjmp	.+262    	; 0x302 <DIO_write_pin+0x120>
 1fc:	0f c0       	rjmp	.+30     	; 0x21c <DIO_write_pin+0x3a>
 1fe:	82 36       	cpi	r24, 0x62	; 98
 200:	51 f1       	breq	.+84     	; 0x256 <DIO_write_pin+0x74>
 202:	83 36       	cpi	r24, 0x63	; 99
 204:	20 f4       	brcc	.+8      	; 0x20e <DIO_write_pin+0x2c>
 206:	81 36       	cpi	r24, 0x61	; 97
 208:	09 f0       	breq	.+2      	; 0x20c <DIO_write_pin+0x2a>
 20a:	7b c0       	rjmp	.+246    	; 0x302 <DIO_write_pin+0x120>
 20c:	07 c0       	rjmp	.+14     	; 0x21c <DIO_write_pin+0x3a>
 20e:	83 36       	cpi	r24, 0x63	; 99
 210:	09 f4       	brne	.+2      	; 0x214 <DIO_write_pin+0x32>
 212:	3e c0       	rjmp	.+124    	; 0x290 <DIO_write_pin+0xae>
 214:	84 36       	cpi	r24, 0x64	; 100
 216:	09 f0       	breq	.+2      	; 0x21a <DIO_write_pin+0x38>
 218:	74 c0       	rjmp	.+232    	; 0x302 <DIO_write_pin+0x120>
 21a:	57 c0       	rjmp	.+174    	; 0x2ca <DIO_write_pin+0xe8>
	{
		case 'a':
		case 'A':
		if(val==1)
 21c:	41 30       	cpi	r20, 0x01	; 1
 21e:	69 f4       	brne	.+26     	; 0x23a <DIO_write_pin+0x58>
		{
			SET_BIT(PORTA,pin);
 220:	2b b3       	in	r18, 0x1b	; 27
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	ac 01       	movw	r20, r24
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_write_pin+0x4c>
 22a:	44 0f       	add	r20, r20
 22c:	55 1f       	adc	r21, r21
 22e:	6a 95       	dec	r22
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_write_pin+0x48>
 232:	ba 01       	movw	r22, r20
 234:	62 2b       	or	r22, r18
 236:	6b bb       	out	0x1b, r22	; 27
 238:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pin);
 23a:	2b b3       	in	r18, 0x1b	; 27
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	ac 01       	movw	r20, r24
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_write_pin+0x66>
 244:	44 0f       	add	r20, r20
 246:	55 1f       	adc	r21, r21
 248:	6a 95       	dec	r22
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_write_pin+0x62>
 24c:	ba 01       	movw	r22, r20
 24e:	60 95       	com	r22
 250:	62 23       	and	r22, r18
 252:	6b bb       	out	0x1b, r22	; 27
 254:	08 95       	ret
		}
		break;

		case 'b':
		case 'B':
		if(val==1)
 256:	41 30       	cpi	r20, 0x01	; 1
 258:	69 f4       	brne	.+26     	; 0x274 <DIO_write_pin+0x92>
		{
			SET_BIT(PORTB,pin);
 25a:	28 b3       	in	r18, 0x18	; 24
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	ac 01       	movw	r20, r24
 262:	02 c0       	rjmp	.+4      	; 0x268 <DIO_write_pin+0x86>
 264:	44 0f       	add	r20, r20
 266:	55 1f       	adc	r21, r21
 268:	6a 95       	dec	r22
 26a:	e2 f7       	brpl	.-8      	; 0x264 <DIO_write_pin+0x82>
 26c:	ba 01       	movw	r22, r20
 26e:	62 2b       	or	r22, r18
 270:	68 bb       	out	0x18, r22	; 24
 272:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pin);
 274:	28 b3       	in	r18, 0x18	; 24
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	ac 01       	movw	r20, r24
 27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_write_pin+0xa0>
 27e:	44 0f       	add	r20, r20
 280:	55 1f       	adc	r21, r21
 282:	6a 95       	dec	r22
 284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_write_pin+0x9c>
 286:	ba 01       	movw	r22, r20
 288:	60 95       	com	r22
 28a:	62 23       	and	r22, r18
 28c:	68 bb       	out	0x18, r22	; 24
 28e:	08 95       	ret
		}
		break;

		case 'C':
		case 'c':
		if(val==1)
 290:	41 30       	cpi	r20, 0x01	; 1
 292:	69 f4       	brne	.+26     	; 0x2ae <DIO_write_pin+0xcc>
		{
			SET_BIT(PORTC,pin);
 294:	25 b3       	in	r18, 0x15	; 21
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	ac 01       	movw	r20, r24
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_write_pin+0xc0>
 29e:	44 0f       	add	r20, r20
 2a0:	55 1f       	adc	r21, r21
 2a2:	6a 95       	dec	r22
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_write_pin+0xbc>
 2a6:	ba 01       	movw	r22, r20
 2a8:	62 2b       	or	r22, r18
 2aa:	65 bb       	out	0x15, r22	; 21
 2ac:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pin);
 2ae:	25 b3       	in	r18, 0x15	; 21
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	ac 01       	movw	r20, r24
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_write_pin+0xda>
 2b8:	44 0f       	add	r20, r20
 2ba:	55 1f       	adc	r21, r21
 2bc:	6a 95       	dec	r22
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_write_pin+0xd6>
 2c0:	ba 01       	movw	r22, r20
 2c2:	60 95       	com	r22
 2c4:	62 23       	and	r22, r18
 2c6:	65 bb       	out	0x15, r22	; 21
 2c8:	08 95       	ret
		}
		break;

		case 'd':
		case 'D':
		if(val==1)
 2ca:	41 30       	cpi	r20, 0x01	; 1
 2cc:	69 f4       	brne	.+26     	; 0x2e8 <DIO_write_pin+0x106>
		{
			SET_BIT(PORTD,pin);
 2ce:	22 b3       	in	r18, 0x12	; 18
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	ac 01       	movw	r20, r24
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <DIO_write_pin+0xfa>
 2d8:	44 0f       	add	r20, r20
 2da:	55 1f       	adc	r21, r21
 2dc:	6a 95       	dec	r22
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <DIO_write_pin+0xf6>
 2e0:	ba 01       	movw	r22, r20
 2e2:	62 2b       	or	r22, r18
 2e4:	62 bb       	out	0x12, r22	; 18
 2e6:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pin);
 2e8:	22 b3       	in	r18, 0x12	; 18
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	ac 01       	movw	r20, r24
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <DIO_write_pin+0x114>
 2f2:	44 0f       	add	r20, r20
 2f4:	55 1f       	adc	r21, r21
 2f6:	6a 95       	dec	r22
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <DIO_write_pin+0x110>
 2fa:	ba 01       	movw	r22, r20
 2fc:	60 95       	com	r22
 2fe:	62 23       	and	r22, r18
 300:	62 bb       	out	0x12, r22	; 18
 302:	08 95       	ret

00000304 <DIO_toggle_pin>:
	}
}

void DIO_toggle_pin(char port,char pin)
{
	  switch(port)
 304:	84 34       	cpi	r24, 0x44	; 68
 306:	09 f4       	brne	.+2      	; 0x30a <DIO_toggle_pin+0x6>
 308:	3d c0       	rjmp	.+122    	; 0x384 <DIO_toggle_pin+0x80>
 30a:	85 34       	cpi	r24, 0x45	; 69
 30c:	40 f4       	brcc	.+16     	; 0x31e <DIO_toggle_pin+0x1a>
 30e:	82 34       	cpi	r24, 0x42	; 66
 310:	f9 f0       	breq	.+62     	; 0x350 <DIO_toggle_pin+0x4c>
 312:	83 34       	cpi	r24, 0x43	; 67
 314:	50 f5       	brcc	.+84     	; 0x36a <DIO_toggle_pin+0x66>
 316:	81 34       	cpi	r24, 0x41	; 65
 318:	09 f0       	breq	.+2      	; 0x31c <DIO_toggle_pin+0x18>
 31a:	40 c0       	rjmp	.+128    	; 0x39c <DIO_toggle_pin+0x98>
 31c:	0c c0       	rjmp	.+24     	; 0x336 <DIO_toggle_pin+0x32>
 31e:	82 36       	cpi	r24, 0x62	; 98
 320:	b9 f0       	breq	.+46     	; 0x350 <DIO_toggle_pin+0x4c>
 322:	83 36       	cpi	r24, 0x63	; 99
 324:	18 f4       	brcc	.+6      	; 0x32c <DIO_toggle_pin+0x28>
 326:	81 36       	cpi	r24, 0x61	; 97
 328:	c9 f5       	brne	.+114    	; 0x39c <DIO_toggle_pin+0x98>
 32a:	05 c0       	rjmp	.+10     	; 0x336 <DIO_toggle_pin+0x32>
 32c:	83 36       	cpi	r24, 0x63	; 99
 32e:	e9 f0       	breq	.+58     	; 0x36a <DIO_toggle_pin+0x66>
 330:	84 36       	cpi	r24, 0x64	; 100
 332:	a1 f5       	brne	.+104    	; 0x39c <DIO_toggle_pin+0x98>
 334:	27 c0       	rjmp	.+78     	; 0x384 <DIO_toggle_pin+0x80>
	  {
		  case 'a':
		  case 'A':
			  TOG_BIT(PORTA,pin);
 336:	2b b3       	in	r18, 0x1b	; 27
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	ac 01       	movw	r20, r24
 33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_toggle_pin+0x40>
 340:	44 0f       	add	r20, r20
 342:	55 1f       	adc	r21, r21
 344:	6a 95       	dec	r22
 346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_toggle_pin+0x3c>
 348:	ba 01       	movw	r22, r20
 34a:	62 27       	eor	r22, r18
 34c:	6b bb       	out	0x1b, r22	; 27
		  break;
 34e:	08 95       	ret

		  case 'b':
		  case 'B':
		     TOG_BIT(PORTB,pin);
 350:	28 b3       	in	r18, 0x18	; 24
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	ac 01       	movw	r20, r24
 358:	02 c0       	rjmp	.+4      	; 0x35e <DIO_toggle_pin+0x5a>
 35a:	44 0f       	add	r20, r20
 35c:	55 1f       	adc	r21, r21
 35e:	6a 95       	dec	r22
 360:	e2 f7       	brpl	.-8      	; 0x35a <DIO_toggle_pin+0x56>
 362:	ba 01       	movw	r22, r20
 364:	62 27       	eor	r22, r18
 366:	68 bb       	out	0x18, r22	; 24
		  break;
 368:	08 95       	ret

		  case 'C':
		  case 'c':
		    TOG_BIT(PORTC,pin);
 36a:	25 b3       	in	r18, 0x15	; 21
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	ac 01       	movw	r20, r24
 372:	02 c0       	rjmp	.+4      	; 0x378 <DIO_toggle_pin+0x74>
 374:	44 0f       	add	r20, r20
 376:	55 1f       	adc	r21, r21
 378:	6a 95       	dec	r22
 37a:	e2 f7       	brpl	.-8      	; 0x374 <DIO_toggle_pin+0x70>
 37c:	ba 01       	movw	r22, r20
 37e:	62 27       	eor	r22, r18
 380:	65 bb       	out	0x15, r22	; 21
		  break;
 382:	08 95       	ret

		  case 'd':
		  case 'D':
		    TOG_BIT(PORTD,pin);
 384:	22 b3       	in	r18, 0x12	; 18
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	ac 01       	movw	r20, r24
 38c:	02 c0       	rjmp	.+4      	; 0x392 <DIO_toggle_pin+0x8e>
 38e:	44 0f       	add	r20, r20
 390:	55 1f       	adc	r21, r21
 392:	6a 95       	dec	r22
 394:	e2 f7       	brpl	.-8      	; 0x38e <DIO_toggle_pin+0x8a>
 396:	ba 01       	movw	r22, r20
 398:	62 27       	eor	r22, r18
 39a:	62 bb       	out	0x12, r22	; 18
 39c:	08 95       	ret

0000039e <DIO_read_pin>:
}

char DIO_read_pin(char port,char pin)
{
	char x;
	switch(port)
 39e:	84 34       	cpi	r24, 0x44	; 68
 3a0:	09 f4       	brne	.+2      	; 0x3a4 <DIO_read_pin+0x6>
 3a2:	51 c0       	rjmp	.+162    	; 0x446 <DIO_read_pin+0xa8>
 3a4:	85 34       	cpi	r24, 0x45	; 69
 3a6:	40 f4       	brcc	.+16     	; 0x3b8 <DIO_read_pin+0x1a>
 3a8:	82 34       	cpi	r24, 0x42	; 66
 3aa:	39 f1       	breq	.+78     	; 0x3fa <DIO_read_pin+0x5c>
 3ac:	83 34       	cpi	r24, 0x43	; 67
 3ae:	c0 f5       	brcc	.+112    	; 0x420 <DIO_read_pin+0x82>
 3b0:	81 34       	cpi	r24, 0x41	; 65
 3b2:	09 f0       	breq	.+2      	; 0x3b6 <DIO_read_pin+0x18>
 3b4:	5a c0       	rjmp	.+180    	; 0x46a <DIO_read_pin+0xcc>
 3b6:	0e c0       	rjmp	.+28     	; 0x3d4 <DIO_read_pin+0x36>
 3b8:	82 36       	cpi	r24, 0x62	; 98
 3ba:	f9 f0       	breq	.+62     	; 0x3fa <DIO_read_pin+0x5c>
 3bc:	83 36       	cpi	r24, 0x63	; 99
 3be:	20 f4       	brcc	.+8      	; 0x3c8 <DIO_read_pin+0x2a>
 3c0:	81 36       	cpi	r24, 0x61	; 97
 3c2:	09 f0       	breq	.+2      	; 0x3c6 <DIO_read_pin+0x28>
 3c4:	52 c0       	rjmp	.+164    	; 0x46a <DIO_read_pin+0xcc>
 3c6:	06 c0       	rjmp	.+12     	; 0x3d4 <DIO_read_pin+0x36>
 3c8:	83 36       	cpi	r24, 0x63	; 99
 3ca:	51 f1       	breq	.+84     	; 0x420 <DIO_read_pin+0x82>
 3cc:	84 36       	cpi	r24, 0x64	; 100
 3ce:	09 f0       	breq	.+2      	; 0x3d2 <DIO_read_pin+0x34>
 3d0:	4c c0       	rjmp	.+152    	; 0x46a <DIO_read_pin+0xcc>
 3d2:	39 c0       	rjmp	.+114    	; 0x446 <DIO_read_pin+0xa8>
	{
		case 'a':
		case 'A':
			x=READ_BIT(PINA,pin);
 3d4:	29 b3       	in	r18, 0x19	; 25
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	06 2e       	mov	r0, r22
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <DIO_read_pin+0x44>
 3de:	88 0f       	add	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	0a 94       	dec	r0
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <DIO_read_pin+0x40>
 3e6:	30 e0       	ldi	r19, 0x00	; 0
 3e8:	82 23       	and	r24, r18
 3ea:	93 23       	and	r25, r19
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <DIO_read_pin+0x54>
 3ee:	95 95       	asr	r25
 3f0:	87 95       	ror	r24
 3f2:	6a 95       	dec	r22
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <DIO_read_pin+0x50>
 3f6:	98 2f       	mov	r25, r24
		break;
 3f8:	38 c0       	rjmp	.+112    	; 0x46a <DIO_read_pin+0xcc>

		case 'b':
		case 'B':
			x=READ_BIT(PINB,pin);
 3fa:	26 b3       	in	r18, 0x16	; 22
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	06 2e       	mov	r0, r22
 402:	02 c0       	rjmp	.+4      	; 0x408 <DIO_read_pin+0x6a>
 404:	88 0f       	add	r24, r24
 406:	99 1f       	adc	r25, r25
 408:	0a 94       	dec	r0
 40a:	e2 f7       	brpl	.-8      	; 0x404 <DIO_read_pin+0x66>
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	82 23       	and	r24, r18
 410:	93 23       	and	r25, r19
 412:	02 c0       	rjmp	.+4      	; 0x418 <DIO_read_pin+0x7a>
 414:	95 95       	asr	r25
 416:	87 95       	ror	r24
 418:	6a 95       	dec	r22
 41a:	e2 f7       	brpl	.-8      	; 0x414 <DIO_read_pin+0x76>
 41c:	98 2f       	mov	r25, r24
		break;
 41e:	25 c0       	rjmp	.+74     	; 0x46a <DIO_read_pin+0xcc>

		case 'C':
		case 'c':
			x=READ_BIT(PINC,pin);	
 420:	23 b3       	in	r18, 0x13	; 19
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	06 2e       	mov	r0, r22
 428:	02 c0       	rjmp	.+4      	; 0x42e <DIO_read_pin+0x90>
 42a:	88 0f       	add	r24, r24
 42c:	99 1f       	adc	r25, r25
 42e:	0a 94       	dec	r0
 430:	e2 f7       	brpl	.-8      	; 0x42a <DIO_read_pin+0x8c>
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	82 23       	and	r24, r18
 436:	93 23       	and	r25, r19
 438:	02 c0       	rjmp	.+4      	; 0x43e <DIO_read_pin+0xa0>
 43a:	95 95       	asr	r25
 43c:	87 95       	ror	r24
 43e:	6a 95       	dec	r22
 440:	e2 f7       	brpl	.-8      	; 0x43a <DIO_read_pin+0x9c>
 442:	98 2f       	mov	r25, r24
		break;
 444:	12 c0       	rjmp	.+36     	; 0x46a <DIO_read_pin+0xcc>

		case 'd':
		case 'D':
			x=READ_BIT(PIND,pin);
 446:	20 b3       	in	r18, 0x10	; 16
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	06 2e       	mov	r0, r22
 44e:	02 c0       	rjmp	.+4      	; 0x454 <DIO_read_pin+0xb6>
 450:	88 0f       	add	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	0a 94       	dec	r0
 456:	e2 f7       	brpl	.-8      	; 0x450 <DIO_read_pin+0xb2>
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	82 23       	and	r24, r18
 45c:	93 23       	and	r25, r19
 45e:	02 c0       	rjmp	.+4      	; 0x464 <DIO_read_pin+0xc6>
 460:	95 95       	asr	r25
 462:	87 95       	ror	r24
 464:	6a 95       	dec	r22
 466:	e2 f7       	brpl	.-8      	; 0x460 <DIO_read_pin+0xc2>
 468:	98 2f       	mov	r25, r24
		break;
	}
return x;
}
 46a:	89 2f       	mov	r24, r25
 46c:	08 95       	ret

0000046e <dio_connet_pullup>:
void dio_connet_pullup(char port,char pin, char connect)
{
	DIO_write_pin(port,pin,connect);
 46e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_write_pin>
}
 472:	08 95       	ret

00000474 <set_port_dir>:


void set_port_dir(char port ,char dir)
{
	switch(port)
 474:	84 34       	cpi	r24, 0x44	; 68
 476:	d9 f0       	breq	.+54     	; 0x4ae <set_port_dir+0x3a>
 478:	85 34       	cpi	r24, 0x45	; 69
 47a:	38 f4       	brcc	.+14     	; 0x48a <set_port_dir+0x16>
 47c:	82 34       	cpi	r24, 0x42	; 66
 47e:	99 f0       	breq	.+38     	; 0x4a6 <set_port_dir+0x32>
 480:	83 34       	cpi	r24, 0x43	; 67
 482:	98 f4       	brcc	.+38     	; 0x4aa <set_port_dir+0x36>
 484:	81 34       	cpi	r24, 0x41	; 65
 486:	a1 f4       	brne	.+40     	; 0x4b0 <set_port_dir+0x3c>
 488:	0c c0       	rjmp	.+24     	; 0x4a2 <set_port_dir+0x2e>
 48a:	82 36       	cpi	r24, 0x62	; 98
 48c:	61 f0       	breq	.+24     	; 0x4a6 <set_port_dir+0x32>
 48e:	83 36       	cpi	r24, 0x63	; 99
 490:	18 f4       	brcc	.+6      	; 0x498 <set_port_dir+0x24>
 492:	81 36       	cpi	r24, 0x61	; 97
 494:	69 f4       	brne	.+26     	; 0x4b0 <set_port_dir+0x3c>
 496:	05 c0       	rjmp	.+10     	; 0x4a2 <set_port_dir+0x2e>
 498:	83 36       	cpi	r24, 0x63	; 99
 49a:	39 f0       	breq	.+14     	; 0x4aa <set_port_dir+0x36>
 49c:	84 36       	cpi	r24, 0x64	; 100
 49e:	41 f4       	brne	.+16     	; 0x4b0 <set_port_dir+0x3c>
 4a0:	06 c0       	rjmp	.+12     	; 0x4ae <set_port_dir+0x3a>
	{
		case 'a':
		case 'A':
			DDRA=dir;
 4a2:	6a bb       	out	0x1a, r22	; 26
			break;
 4a4:	08 95       	ret

		case 'b':
		case 'B':
			DDRB=dir;
 4a6:	67 bb       	out	0x17, r22	; 23
		   break;
 4a8:	08 95       	ret

		case 'C':
		case 'c':
			DDRC=dir;
 4aa:	64 bb       	out	0x14, r22	; 20
		break;
 4ac:	08 95       	ret

		case 'd':
		case 'D':
			DDRD=dir;
 4ae:	61 bb       	out	0x11, r22	; 17
 4b0:	08 95       	ret

000004b2 <DIO_write_port>:
	}
}

void DIO_write_port(char port,char val)
{
	switch(port)
 4b2:	84 34       	cpi	r24, 0x44	; 68
 4b4:	d9 f0       	breq	.+54     	; 0x4ec <DIO_write_port+0x3a>
 4b6:	85 34       	cpi	r24, 0x45	; 69
 4b8:	38 f4       	brcc	.+14     	; 0x4c8 <DIO_write_port+0x16>
 4ba:	82 34       	cpi	r24, 0x42	; 66
 4bc:	99 f0       	breq	.+38     	; 0x4e4 <DIO_write_port+0x32>
 4be:	83 34       	cpi	r24, 0x43	; 67
 4c0:	98 f4       	brcc	.+38     	; 0x4e8 <DIO_write_port+0x36>
 4c2:	81 34       	cpi	r24, 0x41	; 65
 4c4:	a1 f4       	brne	.+40     	; 0x4ee <DIO_write_port+0x3c>
 4c6:	0c c0       	rjmp	.+24     	; 0x4e0 <DIO_write_port+0x2e>
 4c8:	82 36       	cpi	r24, 0x62	; 98
 4ca:	61 f0       	breq	.+24     	; 0x4e4 <DIO_write_port+0x32>
 4cc:	83 36       	cpi	r24, 0x63	; 99
 4ce:	18 f4       	brcc	.+6      	; 0x4d6 <DIO_write_port+0x24>
 4d0:	81 36       	cpi	r24, 0x61	; 97
 4d2:	69 f4       	brne	.+26     	; 0x4ee <DIO_write_port+0x3c>
 4d4:	05 c0       	rjmp	.+10     	; 0x4e0 <DIO_write_port+0x2e>
 4d6:	83 36       	cpi	r24, 0x63	; 99
 4d8:	39 f0       	breq	.+14     	; 0x4e8 <DIO_write_port+0x36>
 4da:	84 36       	cpi	r24, 0x64	; 100
 4dc:	41 f4       	brne	.+16     	; 0x4ee <DIO_write_port+0x3c>
 4de:	06 c0       	rjmp	.+12     	; 0x4ec <DIO_write_port+0x3a>
	{
		case 'a':
		case 'A':
			PORTA=val;
 4e0:	6b bb       	out	0x1b, r22	; 27
		break;
 4e2:	08 95       	ret

		case 'b':
		case 'B':
			PORTB=val;
 4e4:	68 bb       	out	0x18, r22	; 24
		break;
 4e6:	08 95       	ret

		case 'C':
		case 'c':
			PORTC=val;
 4e8:	65 bb       	out	0x15, r22	; 21
		break;
 4ea:	08 95       	ret

		case 'd':
		case 'D':
			PORTD=val;
 4ec:	62 bb       	out	0x12, r22	; 18
 4ee:	08 95       	ret

000004f0 <DIO_toggle_port>:
	}
}

void DIO_toggle_port(char port)
{
	switch(port)
 4f0:	84 34       	cpi	r24, 0x44	; 68
 4f2:	09 f1       	breq	.+66     	; 0x536 <DIO_toggle_port+0x46>
 4f4:	85 34       	cpi	r24, 0x45	; 69
 4f6:	38 f4       	brcc	.+14     	; 0x506 <DIO_toggle_port+0x16>
 4f8:	82 34       	cpi	r24, 0x42	; 66
 4fa:	a9 f0       	breq	.+42     	; 0x526 <DIO_toggle_port+0x36>
 4fc:	83 34       	cpi	r24, 0x43	; 67
 4fe:	b8 f4       	brcc	.+46     	; 0x52e <DIO_toggle_port+0x3e>
 500:	81 34       	cpi	r24, 0x41	; 65
 502:	e1 f4       	brne	.+56     	; 0x53c <DIO_toggle_port+0x4c>
 504:	0c c0       	rjmp	.+24     	; 0x51e <DIO_toggle_port+0x2e>
 506:	82 36       	cpi	r24, 0x62	; 98
 508:	71 f0       	breq	.+28     	; 0x526 <DIO_toggle_port+0x36>
 50a:	83 36       	cpi	r24, 0x63	; 99
 50c:	18 f4       	brcc	.+6      	; 0x514 <DIO_toggle_port+0x24>
 50e:	81 36       	cpi	r24, 0x61	; 97
 510:	a9 f4       	brne	.+42     	; 0x53c <DIO_toggle_port+0x4c>
 512:	05 c0       	rjmp	.+10     	; 0x51e <DIO_toggle_port+0x2e>
 514:	83 36       	cpi	r24, 0x63	; 99
 516:	59 f0       	breq	.+22     	; 0x52e <DIO_toggle_port+0x3e>
 518:	84 36       	cpi	r24, 0x64	; 100
 51a:	81 f4       	brne	.+32     	; 0x53c <DIO_toggle_port+0x4c>
 51c:	0c c0       	rjmp	.+24     	; 0x536 <DIO_toggle_port+0x46>
	{
		case 'a':
		case 'A':
		PORTA=~PORTA;
 51e:	8b b3       	in	r24, 0x1b	; 27
 520:	80 95       	com	r24
 522:	8b bb       	out	0x1b, r24	; 27
		break;
 524:	08 95       	ret

		case 'b':
		case 'B':
		PORTB=~PORTB;
 526:	88 b3       	in	r24, 0x18	; 24
 528:	80 95       	com	r24
 52a:	88 bb       	out	0x18, r24	; 24
		break;
 52c:	08 95       	ret

		case 'C':
		case 'c':
		PORTC=~PORTC;
 52e:	85 b3       	in	r24, 0x15	; 21
 530:	80 95       	com	r24
 532:	85 bb       	out	0x15, r24	; 21
		break;
 534:	08 95       	ret

		case 'd':
		case 'D':
		PORTD=~PORTD;
 536:	82 b3       	in	r24, 0x12	; 18
 538:	80 95       	com	r24
 53a:	82 bb       	out	0x12, r24	; 18
 53c:	08 95       	ret

0000053e <DIO_read_port>:
}

char DIO_read_port(char port)
{
	char x;
	switch(port)
 53e:	84 34       	cpi	r24, 0x44	; 68
 540:	d9 f0       	breq	.+54     	; 0x578 <DIO_read_port+0x3a>
 542:	85 34       	cpi	r24, 0x45	; 69
 544:	38 f4       	brcc	.+14     	; 0x554 <DIO_read_port+0x16>
 546:	82 34       	cpi	r24, 0x42	; 66
 548:	99 f0       	breq	.+38     	; 0x570 <DIO_read_port+0x32>
 54a:	83 34       	cpi	r24, 0x43	; 67
 54c:	98 f4       	brcc	.+38     	; 0x574 <DIO_read_port+0x36>
 54e:	81 34       	cpi	r24, 0x41	; 65
 550:	a1 f4       	brne	.+40     	; 0x57a <DIO_read_port+0x3c>
 552:	0c c0       	rjmp	.+24     	; 0x56c <DIO_read_port+0x2e>
 554:	82 36       	cpi	r24, 0x62	; 98
 556:	61 f0       	breq	.+24     	; 0x570 <DIO_read_port+0x32>
 558:	83 36       	cpi	r24, 0x63	; 99
 55a:	18 f4       	brcc	.+6      	; 0x562 <DIO_read_port+0x24>
 55c:	81 36       	cpi	r24, 0x61	; 97
 55e:	69 f4       	brne	.+26     	; 0x57a <DIO_read_port+0x3c>
 560:	05 c0       	rjmp	.+10     	; 0x56c <DIO_read_port+0x2e>
 562:	83 36       	cpi	r24, 0x63	; 99
 564:	39 f0       	breq	.+14     	; 0x574 <DIO_read_port+0x36>
 566:	84 36       	cpi	r24, 0x64	; 100
 568:	41 f4       	brne	.+16     	; 0x57a <DIO_read_port+0x3c>
 56a:	06 c0       	rjmp	.+12     	; 0x578 <DIO_read_port+0x3a>
	{
		case 'a':
		case 'A':
		x=PINA;
 56c:	99 b3       	in	r25, 0x19	; 25
		break;
 56e:	05 c0       	rjmp	.+10     	; 0x57a <DIO_read_port+0x3c>

		case 'b':
		case 'B':
		x=PINB;
 570:	96 b3       	in	r25, 0x16	; 22
		break;
 572:	03 c0       	rjmp	.+6      	; 0x57a <DIO_read_port+0x3c>

		case 'C':
		case 'c':
		x=PINC;
 574:	93 b3       	in	r25, 0x13	; 19
		break;
 576:	01 c0       	rjmp	.+2      	; 0x57a <DIO_read_port+0x3c>

		case 'd':
		case 'D':
		x=PIND;
 578:	90 b3       	in	r25, 0x10	; 16
		break;
	}
	return x;
}
 57a:	89 2f       	mov	r24, r25
 57c:	08 95       	ret

0000057e <DIO_write_low_nibble>:

void DIO_write_low_nibble(unsigned char portname,unsigned char val)
{
 57e:	0f 93       	push	r16
 580:	1f 93       	push	r17
 582:	cf 93       	push	r28
 584:	c8 2f       	mov	r28, r24
 586:	06 2f       	mov	r16, r22
	DIO_write_pin(portname,0,READ_BIT(val,0));
 588:	46 2f       	mov	r20, r22
 58a:	41 70       	andi	r20, 0x01	; 1
 58c:	60 e0       	ldi	r22, 0x00	; 0
 58e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_write_pin>
	DIO_write_pin(portname,1,READ_BIT(val,1));
 592:	10 e0       	ldi	r17, 0x00	; 0
 594:	a8 01       	movw	r20, r16
 596:	42 70       	andi	r20, 0x02	; 2
 598:	50 70       	andi	r21, 0x00	; 0
 59a:	55 95       	asr	r21
 59c:	47 95       	ror	r20
 59e:	8c 2f       	mov	r24, r28
 5a0:	61 e0       	ldi	r22, 0x01	; 1
 5a2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_write_pin>
	DIO_write_pin(portname,2,READ_BIT(val,2));
 5a6:	a8 01       	movw	r20, r16
 5a8:	44 70       	andi	r20, 0x04	; 4
 5aa:	50 70       	andi	r21, 0x00	; 0
 5ac:	55 95       	asr	r21
 5ae:	47 95       	ror	r20
 5b0:	55 95       	asr	r21
 5b2:	47 95       	ror	r20
 5b4:	8c 2f       	mov	r24, r28
 5b6:	62 e0       	ldi	r22, 0x02	; 2
 5b8:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_write_pin>
	DIO_write_pin(portname,3,READ_BIT(val,3));
 5bc:	08 70       	andi	r16, 0x08	; 8
 5be:	10 70       	andi	r17, 0x00	; 0
 5c0:	a8 01       	movw	r20, r16
 5c2:	55 95       	asr	r21
 5c4:	47 95       	ror	r20
 5c6:	55 95       	asr	r21
 5c8:	47 95       	ror	r20
 5ca:	55 95       	asr	r21
 5cc:	47 95       	ror	r20
 5ce:	8c 2f       	mov	r24, r28
 5d0:	63 e0       	ldi	r22, 0x03	; 3
 5d2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_write_pin>
}
 5d6:	cf 91       	pop	r28
 5d8:	1f 91       	pop	r17
 5da:	0f 91       	pop	r16
 5dc:	08 95       	ret

000005de <DIO_write_high_nibble>:

void DIO_write_high_nibble(unsigned char portname,unsigned char val)
{
 5de:	0f 93       	push	r16
 5e0:	1f 93       	push	r17
 5e2:	cf 93       	push	r28
 5e4:	c8 2f       	mov	r28, r24
 5e6:	06 2f       	mov	r16, r22
	DIO_write_pin(portname,4,READ_BIT(val,0));
 5e8:	46 2f       	mov	r20, r22
 5ea:	41 70       	andi	r20, 0x01	; 1
 5ec:	64 e0       	ldi	r22, 0x04	; 4
 5ee:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_write_pin>
	DIO_write_pin(portname,5,READ_BIT(val,1));
 5f2:	10 e0       	ldi	r17, 0x00	; 0
 5f4:	a8 01       	movw	r20, r16
 5f6:	42 70       	andi	r20, 0x02	; 2
 5f8:	50 70       	andi	r21, 0x00	; 0
 5fa:	55 95       	asr	r21
 5fc:	47 95       	ror	r20
 5fe:	8c 2f       	mov	r24, r28
 600:	65 e0       	ldi	r22, 0x05	; 5
 602:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_write_pin>
	DIO_write_pin(portname,6,READ_BIT(val,2));
 606:	a8 01       	movw	r20, r16
 608:	44 70       	andi	r20, 0x04	; 4
 60a:	50 70       	andi	r21, 0x00	; 0
 60c:	55 95       	asr	r21
 60e:	47 95       	ror	r20
 610:	55 95       	asr	r21
 612:	47 95       	ror	r20
 614:	8c 2f       	mov	r24, r28
 616:	66 e0       	ldi	r22, 0x06	; 6
 618:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_write_pin>
	DIO_write_pin(portname,7,READ_BIT(val,3));
 61c:	08 70       	andi	r16, 0x08	; 8
 61e:	10 70       	andi	r17, 0x00	; 0
 620:	a8 01       	movw	r20, r16
 622:	55 95       	asr	r21
 624:	47 95       	ror	r20
 626:	55 95       	asr	r21
 628:	47 95       	ror	r20
 62a:	55 95       	asr	r21
 62c:	47 95       	ror	r20
 62e:	8c 2f       	mov	r24, r28
 630:	67 e0       	ldi	r22, 0x07	; 7
 632:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_write_pin>
}
 636:	cf 91       	pop	r28
 638:	1f 91       	pop	r17
 63a:	0f 91       	pop	r16
 63c:	08 95       	ret

0000063e <DIO_write_low_nibble_ex2>:

void DIO_write_low_nibble_ex2(unsigned char portname, unsigned char val)
{
	val&=0x0f;
 63e:	6f 70       	andi	r22, 0x0F	; 15
	switch(portname)
 640:	84 34       	cpi	r24, 0x44	; 68
 642:	29 f1       	breq	.+74     	; 0x68e <DIO_write_low_nibble_ex2+0x50>
 644:	85 34       	cpi	r24, 0x45	; 69
 646:	38 f4       	brcc	.+14     	; 0x656 <DIO_write_low_nibble_ex2+0x18>
 648:	82 34       	cpi	r24, 0x42	; 66
 64a:	99 f0       	breq	.+38     	; 0x672 <DIO_write_low_nibble_ex2+0x34>
 64c:	83 34       	cpi	r24, 0x43	; 67
 64e:	c0 f4       	brcc	.+48     	; 0x680 <DIO_write_low_nibble_ex2+0x42>
 650:	81 34       	cpi	r24, 0x41	; 65
 652:	19 f5       	brne	.+70     	; 0x69a <DIO_write_low_nibble_ex2+0x5c>
 654:	07 c0       	rjmp	.+14     	; 0x664 <DIO_write_low_nibble_ex2+0x26>
 656:	83 36       	cpi	r24, 0x63	; 99
 658:	99 f0       	breq	.+38     	; 0x680 <DIO_write_low_nibble_ex2+0x42>
 65a:	84 36       	cpi	r24, 0x64	; 100
 65c:	c1 f0       	breq	.+48     	; 0x68e <DIO_write_low_nibble_ex2+0x50>
 65e:	82 36       	cpi	r24, 0x62	; 98
 660:	e1 f4       	brne	.+56     	; 0x69a <DIO_write_low_nibble_ex2+0x5c>
 662:	07 c0       	rjmp	.+14     	; 0x672 <DIO_write_low_nibble_ex2+0x34>
	{
		case 'A':
		
			PORTA&=0xf0;
 664:	8b b3       	in	r24, 0x1b	; 27
 666:	80 7f       	andi	r24, 0xF0	; 240
 668:	8b bb       	out	0x1b, r24	; 27
			PORTA|=val;
 66a:	8b b3       	in	r24, 0x1b	; 27
 66c:	68 2b       	or	r22, r24
 66e:	6b bb       	out	0x1b, r22	; 27
		    break;
 670:	08 95       	ret
		case 'B':
		case 'b':
			PORTB&=0xf0;
 672:	88 b3       	in	r24, 0x18	; 24
 674:	80 7f       	andi	r24, 0xF0	; 240
 676:	88 bb       	out	0x18, r24	; 24
			PORTB|=val;
 678:	88 b3       	in	r24, 0x18	; 24
 67a:	68 2b       	or	r22, r24
 67c:	68 bb       	out	0x18, r22	; 24
			break;
 67e:	08 95       	ret
		case 'C':
		case 'c':
			PORTB&=0xf0;
 680:	88 b3       	in	r24, 0x18	; 24
 682:	80 7f       	andi	r24, 0xF0	; 240
 684:	88 bb       	out	0x18, r24	; 24
			PORTB|=val;
 686:	88 b3       	in	r24, 0x18	; 24
 688:	68 2b       	or	r22, r24
 68a:	68 bb       	out	0x18, r22	; 24
			break;
 68c:	08 95       	ret
		case 'D':
		case 'd':
			PORTB&=0xf0;
 68e:	88 b3       	in	r24, 0x18	; 24
 690:	80 7f       	andi	r24, 0xF0	; 240
 692:	88 bb       	out	0x18, r24	; 24
			PORTB|=val;
 694:	88 b3       	in	r24, 0x18	; 24
 696:	68 2b       	or	r22, r24
 698:	68 bb       	out	0x18, r22	; 24
 69a:	08 95       	ret

0000069c <DIO_write_high_nibble_ex2>:
	}
}

void DIO_write_high_nibble_ex2(unsigned char portname, unsigned char val)
{
	val<<=4;
 69c:	62 95       	swap	r22
 69e:	60 7f       	andi	r22, 0xF0	; 240
	switch(portname)
 6a0:	84 34       	cpi	r24, 0x44	; 68
 6a2:	51 f1       	breq	.+84     	; 0x6f8 <DIO_write_high_nibble_ex2+0x5c>
 6a4:	85 34       	cpi	r24, 0x45	; 69
 6a6:	38 f4       	brcc	.+14     	; 0x6b6 <DIO_write_high_nibble_ex2+0x1a>
 6a8:	82 34       	cpi	r24, 0x42	; 66
 6aa:	c1 f0       	breq	.+48     	; 0x6dc <DIO_write_high_nibble_ex2+0x40>
 6ac:	83 34       	cpi	r24, 0x43	; 67
 6ae:	e8 f4       	brcc	.+58     	; 0x6ea <DIO_write_high_nibble_ex2+0x4e>
 6b0:	81 34       	cpi	r24, 0x41	; 65
 6b2:	41 f5       	brne	.+80     	; 0x704 <DIO_write_high_nibble_ex2+0x68>
 6b4:	0c c0       	rjmp	.+24     	; 0x6ce <DIO_write_high_nibble_ex2+0x32>
 6b6:	82 36       	cpi	r24, 0x62	; 98
 6b8:	89 f0       	breq	.+34     	; 0x6dc <DIO_write_high_nibble_ex2+0x40>
 6ba:	83 36       	cpi	r24, 0x63	; 99
 6bc:	18 f4       	brcc	.+6      	; 0x6c4 <DIO_write_high_nibble_ex2+0x28>
 6be:	81 36       	cpi	r24, 0x61	; 97
 6c0:	09 f5       	brne	.+66     	; 0x704 <DIO_write_high_nibble_ex2+0x68>
 6c2:	05 c0       	rjmp	.+10     	; 0x6ce <DIO_write_high_nibble_ex2+0x32>
 6c4:	83 36       	cpi	r24, 0x63	; 99
 6c6:	89 f0       	breq	.+34     	; 0x6ea <DIO_write_high_nibble_ex2+0x4e>
 6c8:	84 36       	cpi	r24, 0x64	; 100
 6ca:	e1 f4       	brne	.+56     	; 0x704 <DIO_write_high_nibble_ex2+0x68>
 6cc:	15 c0       	rjmp	.+42     	; 0x6f8 <DIO_write_high_nibble_ex2+0x5c>
	{
		case 'A':
		case 'a':
		PORTA&=0x0f;
 6ce:	8b b3       	in	r24, 0x1b	; 27
 6d0:	8f 70       	andi	r24, 0x0F	; 15
 6d2:	8b bb       	out	0x1b, r24	; 27
		PORTA|=val;
 6d4:	8b b3       	in	r24, 0x1b	; 27
 6d6:	68 2b       	or	r22, r24
 6d8:	6b bb       	out	0x1b, r22	; 27
		break;
 6da:	08 95       	ret
		case 'B':
		case 'b':
		PORTB&=0x0f;
 6dc:	88 b3       	in	r24, 0x18	; 24
 6de:	8f 70       	andi	r24, 0x0F	; 15
 6e0:	88 bb       	out	0x18, r24	; 24
		PORTB|=val;
 6e2:	88 b3       	in	r24, 0x18	; 24
 6e4:	68 2b       	or	r22, r24
 6e6:	68 bb       	out	0x18, r22	; 24
		break;
 6e8:	08 95       	ret
		case 'C':
		case 'c':
		PORTB&=0x0f;
 6ea:	88 b3       	in	r24, 0x18	; 24
 6ec:	8f 70       	andi	r24, 0x0F	; 15
 6ee:	88 bb       	out	0x18, r24	; 24
		PORTB|=val;
 6f0:	88 b3       	in	r24, 0x18	; 24
 6f2:	68 2b       	or	r22, r24
 6f4:	68 bb       	out	0x18, r22	; 24
		break;
 6f6:	08 95       	ret
		case 'D':
		case 'd':
		PORTB&=0x0f;
 6f8:	88 b3       	in	r24, 0x18	; 24
 6fa:	8f 70       	andi	r24, 0x0F	; 15
 6fc:	88 bb       	out	0x18, r24	; 24
		PORTB|=val;
 6fe:	88 b3       	in	r24, 0x18	; 24
 700:	68 2b       	or	r22, r24
 702:	68 bb       	out	0x18, r22	; 24
 704:	08 95       	ret

00000706 <seven_seg_init>:


#include "DIO.h"
#include "std_macros.h"
void seven_seg_init(unsigned char portname)
{
 706:	cf 93       	push	r28
 708:	c8 2f       	mov	r28, r24
	set_pin_dir(portname,0,1);	
 70a:	60 e0       	ldi	r22, 0x00	; 0
 70c:	41 e0       	ldi	r20, 0x01	; 1
 70e:	0e 94 60 00 	call	0xc0	; 0xc0 <set_pin_dir>
	set_pin_dir(portname,1,1);	
 712:	8c 2f       	mov	r24, r28
 714:	61 e0       	ldi	r22, 0x01	; 1
 716:	41 e0       	ldi	r20, 0x01	; 1
 718:	0e 94 60 00 	call	0xc0	; 0xc0 <set_pin_dir>
	set_pin_dir(portname,2,1);	
 71c:	8c 2f       	mov	r24, r28
 71e:	62 e0       	ldi	r22, 0x02	; 2
 720:	41 e0       	ldi	r20, 0x01	; 1
 722:	0e 94 60 00 	call	0xc0	; 0xc0 <set_pin_dir>
	set_pin_dir(portname,3,1);	
 726:	8c 2f       	mov	r24, r28
 728:	63 e0       	ldi	r22, 0x03	; 3
 72a:	41 e0       	ldi	r20, 0x01	; 1
 72c:	0e 94 60 00 	call	0xc0	; 0xc0 <set_pin_dir>
}
 730:	cf 91       	pop	r28
 732:	08 95       	ret

00000734 <seven_seg_write>:

void seven_seg_write(unsigned char portname,unsigned char val)
{
	DIO_write_low_nibble_ex2(portname,val);
 734:	0e 94 1f 03 	call	0x63e	; 0x63e <DIO_write_low_nibble_ex2>
}
 738:	08 95       	ret

0000073a <_exit>:
 73a:	f8 94       	cli

0000073c <__stop_program>:
 73c:	ff cf       	rjmp	.-2      	; 0x73c <__stop_program>
